// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    password      String
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    pastAuthoring    PastAuthoring?
    Epoch            Epoch[]
    experiences      Experience[]
    // A users list of past authoring experiences
    extendedAnalysis ExtendedAnalysis[]
    // An experience that the user has chosen to go into more depth on

    futureAuthoring FutureAuthoring?
}

model PastAuthoring {
    id     String  @id @unique
    userId String  @unique
    user   User    @relation(fields: [userId], references: [id])
    epochs Epoch[]
}

model Epoch {
    id              String         @id @default(cuid())
    user            User           @relation(fields: [userId], references: [id])
    userId          String
    order           Int
    title           String
    experiences     Experience[]
    pastAuthoring   PastAuthoring? @relation(fields: [pastAuthoringId], references: [id])
    pastAuthoringId String?
}

model Experience {
    id     String @id @default(cuid())
    userId String
    user   User   @relation(fields: [userId], references: [id])

    epoch   Epoch  @relation(fields: [epochId], references: [id])
    epochId String

    title       String?
    description String?
    // The first time the user writes about an experience they give it a title, and a description.

    basicAnalysis String?

    extendedAnalysis   ExtendedAnalysis?
    extendedAnalysisId String?
}

model ExtendedAnalysis {
    userId String
    user   User   @relation(fields: [userId], references: [id])

    experience   Experience @relation(fields: [experienceId], references: [id])
    experienceId String     @id

    eventAnalysis  String?
    effectAnalysis String?
}

//
//
//

model FutureAuthoring {
    user   User   @relation(fields: [userId], references: [id])
    userId String @id @unique

    // Stage 1 Forming an Abstract View, from the bottom up

    oneThingYouCouldDoBetter String?
    thingsToLearnAbout       String?
    improveYourHabits        String?

    socialLife  String?
    leisureLife String?
    familyLife  String?
    careerLife  String?

    qualitiesYouAdmire String?
    idealFuture        String?
    worstFuture        String?

    // Stage 2
    goals Goal[]
}

model Goal {
    id String @id @unique

    isMain          Boolean
    // Is this the abstract aggregate goal
    priority        Int
    title           String
    description     String
    FutureAuthoring FutureAuthoring? @relation(fields: [userId], references: [userId])
    userId          String?

    // Evaluating your motives
    motiveAnalysis    String
    impactAnalysis    String
    strategicAnalysis String
    obstacleAnalysis  String
}
