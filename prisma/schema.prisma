// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    password      String
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    role          String    @default("user")

    epochs           Epoch[]
    experiences      Experience[]
    goals            Goal[]
    // A users list of past authoring experiences
    extendedAnalysis ExtendedAnalysis[]
    // An experience that the user has chosen to go into more depth on

    futureAuthoring FutureAuthoring?
}

model Epoch {
    id          String       @id @default(cuid())
    user        User         @relation(fields: [userId], references: [id])
    userId      String
    order       Int          @unique // @default(autoincrement())
    title       String       @default("")
    experiences Experience[]
}

model Experience {
    id                 String            @id @default(cuid())
    userId             String
    user               User              @relation(fields: [userId], references: [id])
    order              Int // ! This cannot be unique because 
    epoch              Epoch             @relation(fields: [epochId], references: [id], onDelete: Cascade)
    epochId            String
    title              String            @default("")
    description        String            @db.Text
    basicAnalysis      String            @db.Text
    extendedAnalysis   ExtendedAnalysis?
    extendedAnalysisId String?
}

model ExtendedAnalysis {
    userId       String
    user         User       @relation(fields: [userId], references: [id])
    selected     Boolean
    // Soft delete, making the analysis present in cycle or not. This allows the writing to be retained when the user deselects
    experience   Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)
    experienceId String     @id

    eventAnalysis  String @db.Text
    effectAnalysis String @db.Text
}

//
//
//

model FutureAuthoring {
    user   User   @relation(fields: [userId], references: [id])
    userId String @id @unique

    // Stage 1 Forming an Abstract View, from the bottom up

    oneThingYouCouldDoBetter String @db.Text
    thingsToLearnAbout       String @db.Text
    improveYourHabits        String @db.Text

    socialLife  String @db.Text
    leisureLife String @db.Text
    familyLife  String @db.Text
    careerLife  String @db.Text

    qualitiesYouAdmire String @db.Text
    idealFuture        String @db.Text
    worstFuture        String @db.Text
}

model Goal {
    id     String @id @default(cuid())
    user   User   @relation(fields: [userId], references: [id])
    userId String

    isMain      Boolean
    // Is this the abstract aggregate goal
    priority    Int
    title       String  @default("")
    description String  @db.Text

    // Evaluating your motives
    motiveAnalysis    String @db.Text
    impactAnalysis    String @db.Text
    strategicAnalysis String @db.Text
    obstacleAnalysis  String @db.Text
    progressAnalysis  String @db.Text
}
